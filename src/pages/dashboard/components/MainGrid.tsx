import * as React from 'react';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import Stack from '@mui/material/Stack';
import Typography from '@mui/material/Typography';
import Copyright from '../internals/components/Copyright';
import ChartUserByCountry from './ChartUserByCountry';
import CustomizedTreeView from './CustomizedTreeView';
import CustomizedDataGrid from './CustomizedDataGrid';
import HighlightedCard from './HighlightedCard';
import PageViewsBarChart from './PageViewsBarChart';
import SessionsChart from './SessionsChart';
import StatCard, { StatCardProps } from './StatCard';
import { useEffect, useState } from 'react';
import { fetchUserCount } from '../../../services/userService';
import { getDailyExamAttemptsInMonth } from "../../../services/examResultService";
import { getAvgScoreLast7Days } from "../../../services/examResultService";
import { getTotalquestion } from '../../../services/questionService';
export default function MainGrid() {

  const [userCount, setUserCount] = React.useState<number>(0);
  const [dailyCounts, setDailyCounts] = useState<number[]>([]);
  const [labels, setLabels] = useState<string[]>([]);
  // trong MainGrid component
  const [avgScore, setAvgScore] = useState<number>(0);
  const [questionCount, setQuestionCount] = React.useState<number>(0);
  React.useEffect(() => {
    const getUserCount = async () => {
      try {
        const count = await fetchUserCount();

        setUserCount(count);
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i s·ªë ng∆∞·ªùi d√πng:", err);
      }
    };
    getUserCount();
  }, []);
  React.useEffect(() => {
    const getQuestionCount = async () => {
      try {
        const count = await getTotalquestion();

        setQuestionCount(count);
      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i s·ªë ng∆∞·ªùi d√πng:", err);
      }
    };
    getQuestionCount();
  }, []);

  React.useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getDailyExamAttemptsInMonth();

        const counts = response.map((item: { date: string; count: number }) => item.count);
        const dates = response.map((item: { date: string; count: number }) => item.date);
        console.log("üöÄ ~ file: MainGrid.tsx:50 ~ fetchData ~ dates:", dates);
        console.log("üöÄ ~ file: MainGrid.tsx:50 ~ fetchData ~ counts:", counts);
        setDailyCounts(counts);
        setLabels(dates);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu l∆∞·ª£t thi m·ªói ng√†y:", error);
      }
    };

    fetchData();
  }, []);

  // L·∫•y ƒëi·ªÉm trung b√¨nh trong 7 ng√†y g·∫ßn nh·∫•t
  // L∆∞u √Ω: ƒêo·∫°n n√†y c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh t√πy thu·ªôc v√†o c√°ch b·∫°n mu·ªën l·∫•y d·ªØ li·ªáu
  // v√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API
  useEffect(() => {
    const fetchStats = async () => {
      try {
        const score = await getAvgScoreLast7Days();
        setAvgScore(score);
      } catch (err) {
        console.error("‚ùå L·ªói khi l·∫•y ƒëi·ªÉm trung b√¨nh:", err);
      }
    };
    fetchStats();
  }, []);

  const data: StatCardProps[] = [
    {
      title: 'Users',
      value: userCount.toString(),
      interval: 'Last 30 days',
      trend: 'up',
      data: [
        200, 24, 220, 260, 240, 380, 100, 240, 280, 240, 300, 340, 320, 360, 340, 380,
        360, 400, 380, 420, 400, 640, 340, 460, 440, 480, 460, 600, 880, 920,
      ],
    },
    {
      title: 't·ªïng s·ªë l∆∞·ª£t thi c·ªßa th√°ng hi·ªán t·∫°i',
      value: dailyCounts.reduce((sum, c) => sum + c, 0).toString(),
      interval: 's·ªë l∆∞·ª£t thi m·ªói ng√†y trong th√°ng hi·ªán t·∫°i',
      trend: 'up',
      data: dailyCounts,
    },
    {
      title: 'üß† Trung b√¨nh ƒëi·ªÉm thi',
      value: avgScore.toString(),
      interval: '7 ng√†y g·∫ßn nh·∫•t',
      trend: 'neutral',
      data: new Array(30).fill(avgScore), // ho·∫∑c d·ªØ li·ªáu th·ª±c n·∫øu c·∫ßn
    },
    {
      title: 'üß† c√¢u h·ªèi ',
      value: questionCount.toString(),
      interval: 's·ªë l∆∞·ª£ng c√¢u h·ªèi ƒë√£ t·∫°o',
      trend: 'neutral',
      data: [questionCount], // ho·∫∑c d·ªØ li·ªáu th·ª±c n·∫øu c·∫ßn
    },
  ];
  return (
    <Box sx={{ width: '100%', maxWidth: { sm: '100%', md: '1700px' } }}>
      {/* cards */}
      <Typography component="h2" variant="h6" sx={{ mb: 2 }}>
        Overview
      </Typography>
      <Grid
        container
        spacing={2}
        columns={12}
        sx={{ mb: (theme) => theme.spacing(2) }}
      >
        {data.map((card, index) => (
          <Grid key={index} size={{ xs: 12, sm: 6, lg: 3 }}>
            <StatCard {...card} />
          </Grid>
        ))}
        {/* <Grid size={{ xs: 12, sm: 6, lg: 3 }}>
          <HighlightedCard />
        </Grid> */}
        <Grid size={{ xs: 12, md: 6 }}>
          <SessionsChart />
        </Grid>
        <Grid size={{ xs: 12, md: 6 }}>
          <PageViewsBarChart />
        </Grid>
      </Grid>
      <Typography component="h2" variant="h6" sx={{ mb: 2 }}>
        Details
      </Typography>
      {/* <Grid container spacing={2} columns={12}>
        <Grid size={{ xs: 12, lg: 9 }}>
          <CustomizedDataGrid />
        </Grid>
        <Grid size={{ xs: 12, lg: 3 }}>
          <Stack gap={2} direction={{ xs: 'column', sm: 'row', lg: 'column' }}>
            <CustomizedTreeView />
            <ChartUserByCountry />
          </Stack>
        </Grid>
      </Grid> */}
      <Copyright sx={{ my: 4 }} />
    </Box>
  );
}
