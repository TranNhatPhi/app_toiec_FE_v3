import React, { useState, useEffect, useRef } from "react";
import { useParams } from "react-router-dom";
import useExamDetail from "../hooks/useExamDetail";
import { submitExamResult } from "../services/examResultService";
import "../assets/styles/examDetail.css"; // Import CSS

const ExamDetail: React.FC = () => {
    const { examId } = useParams<{ examId: string }>();
    const { examDetail, loading, error } = useExamDetail(Number(examId));

    const LOCAL_STORAGE_KEY_TIME = `exam_time_${examId}`;
    const LOCAL_STORAGE_KEY_ANSWERS = `exam_answers_${examId}`;

    // ‚úÖ L·∫•y th·ªùi gian l√†m b√†i t·ª´ `localStorage`
    const [timeLeft, setTimeLeft] = useState<number | null>(() => {
        return Number(localStorage.getItem(LOCAL_STORAGE_KEY_TIME)) || null;
    });

    // ‚úÖ L·∫•y danh s√°ch ƒë√°p √°n ƒë√£ ch·ªçn t·ª´ `localStorage`
    const [answers, setAnswers] = useState<{ [key: number]: string }>(() => {
        const savedAnswers = localStorage.getItem(LOCAL_STORAGE_KEY_ANSWERS);
        return savedAnswers ? JSON.parse(savedAnswers) : {};
    });

    const [isSubmitting, setIsSubmitting] = useState(false); // ‚úÖ Tr·∫°ng th√°i ƒëang n·ªôp b√†i
    const questionRefs = useRef<(HTMLDivElement | null)[]>([]);

    useEffect(() => {
        if (examDetail?.duration && timeLeft === null) {
            const savedTime = Number(localStorage.getItem(LOCAL_STORAGE_KEY_TIME)) || examDetail.duration * 60;
            setTimeLeft(savedTime);
        }
    }, [examDetail]);

    // ‚úÖ Gi·∫£m th·ªùi gian m·ªói gi√¢y v√† l∆∞u v√†o `localStorage`
    useEffect(() => {
        if (timeLeft === null) return;

        if (timeLeft > 0) {
            localStorage.setItem(LOCAL_STORAGE_KEY_TIME, String(timeLeft));
            const timer = setTimeout(() => {
                setTimeLeft((prevTime) => (prevTime !== null ? prevTime - 1 : null));
            }, 1000);
            return () => clearTimeout(timer);
        } else if (timeLeft === 0) {
            alert("‚è≥ H·∫øt th·ªùi gian! B√†i thi s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông n·ªôp.");
            handleSubmitExam();
        }
    }, [timeLeft]);

    // ‚úÖ H√†m x·ª≠ l√Ω khi ch·ªçn ƒë√°p √°n (l∆∞u v√†o state + localStorage)
    const handleSelectAnswer = (questionIndex: number, option: string) => {
        setAnswers((prevAnswers) => {
            const updatedAnswers = { ...prevAnswers, [questionIndex]: option };
            localStorage.setItem(LOCAL_STORAGE_KEY_ANSWERS, JSON.stringify(updatedAnswers));
            return updatedAnswers;
        });
    };

    // ‚úÖ ƒê·ªãnh d·∫°ng th·ªùi gian
    const formatTime = (seconds: number | null) => {
        if (seconds === null) return "ƒêang t·∫£i...";
        const minutes = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${minutes}:${secs < 10 ? "0" : ""}${secs}`;
    };

    // ‚úÖ H√†m cu·ªôn ƒë·∫øn c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn
    const scrollToQuestion = (index: number) => {
        questionRefs.current[index]?.scrollIntoView({ behavior: "smooth", block: "center" });
    };

    // ‚úÖ H√†m n·ªôp b√†i thi
    const handleSubmitExam = async () => {
        if (isSubmitting) return;
        setIsSubmitting(true);

        if (!examDetail) {
            alert("‚ùå L·ªói: Kh√¥ng th·ªÉ n·ªôp b√†i v√¨ d·ªØ li·ªáu b√†i thi ch∆∞a ƒë∆∞·ª£c t·∫£i.");
            setIsSubmitting(false);
            return;
        }

        const confirmSubmit = window.confirm("üöÄ B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën n·ªôp b√†i?");
        if (!confirmSubmit) {
            setIsSubmitting(false);
            return;
        }

        // ‚úÖ C√¥ng th·ª©c ƒë√∫ng ƒë·ªÉ t√≠nh th·ªùi gian ho√†n th√†nh
        const completedTime = examDetail.duration - Math.floor((timeLeft || 0) / 60);

        // ‚úÖ Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n API
        const userAnswers = Object.entries(answers).map(([questionId, selectedAnswer]) => ({
            question_id: Number(questionId),
            selected_answer: selectedAnswer,
        }));

        try {
            const result = await submitExamResult(Number(examId), userAnswers, completedTime);

            alert(
                `‚úÖ N·ªôp b√†i th√†nh c√¥ng!\n` +
                `‚úîÔ∏è S·ªë c√¢u ƒë√∫ng: ${result.correct_answers}\n` +
                `‚ùå S·ªë c√¢u sai: ${result.wrong_answers}\n` +
                `‚ùì C√¢u ch∆∞a tr·∫£ l·ªùi: ${result.unanswered_questions}\n` +
                `üèÜ ƒêi·ªÉm t·ªïng: ${result.total_score}\n` +
                `‚è≥ Th·ªùi gian ho√†n th√†nh: ${completedTime} ph√∫t`
            );

            // ‚úÖ Reset th·ªùi gian v·ªÅ m·∫∑c ƒë·ªãnh
            const resetDuration = examDetail.duration * 60; // Chuy·ªÉn ph√∫t -> gi√¢y
            setTimeLeft(resetDuration);
            localStorage.setItem(LOCAL_STORAGE_KEY_TIME, String(resetDuration));

            // ‚úÖ X√≥a ƒë√°p √°n ƒë√£ ch·ªçn
            setAnswers({});
            localStorage.removeItem(LOCAL_STORAGE_KEY_ANSWERS);

            // ‚úÖ Reload trang ho·∫∑c chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang k·∫øt qu·∫£
            setTimeout(() => {
                window.location.href = "/exam-results";
            }, 500); // ƒê·ª£i 0.5s tr∆∞·ªõc khi chuy·ªÉn trang

        } catch (error: unknown) {
            if (error instanceof Error) {
                alert(`‚ùå L·ªói khi n·ªôp b√†i: ${error.message}`);
            } else {
                alert("‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.");
            }
        } finally {
            setIsSubmitting(false);
        }
    };




    if (loading) return <p>Loading exam...</p>;
    if (error) return <p style={{ color: "red" }}>{error}</p>;
    if (!examDetail) return <p>No exam data available.</p>;

    return (
        <div className="exam-page">
            {/* ‚úÖ Sidebar ch·ª©a danh s√°ch c√¢u h·ªèi theo d·∫°ng l∆∞·ªõi (grid) */}
            <aside className="sidebar">
                <h3>Danh s√°ch c√¢u h·ªèi</h3>
                {examDetail.parts.map((part, partIndex) => (
                    <div key={part.part_id} className="question-group">
                        <h4>Ph·∫ßn {part.part_number}</h4>
                        <div className="question-grid">
                            {part.questions.map((_, index) => {
                                const questionIndex = examDetail.parts
                                    .slice(0, partIndex)
                                    .reduce((acc, p) => acc + p.questions.length, 0) + index;

                                return (
                                    <button
                                        key={questionIndex}
                                        className={`question-button ${answers[questionIndex] ? "answered" : ""}`}
                                        onClick={() => scrollToQuestion(questionIndex)}
                                    >
                                        {questionIndex + 1}
                                    </button>
                                );
                            })}
                        </div>
                    </div>
                ))}
                {/* ‚úÖ N√∫t N·ªôp b√†i (Di chuy·ªÉn sang b√™n ph·∫£i) */}
                <button className="submit-button" onClick={handleSubmitExam} disabled={isSubmitting || timeLeft === 0}>
                    {isSubmitting ? "ƒêang n·ªôp..." : "üìù N·ªôp b√†i"}
                </button>
            </aside>

            {/* ‚úÖ N·ªôi dung ch√≠nh */}
            <div className="exam-container">
                <h2>{examDetail.title}</h2>

                {/* ‚úÖ Audio nghe b√†i thi */}
                <div className="audio-player">
                    <strong>Nghe ƒëo·∫°n h·ªôi tho·∫°i:</strong>
                    <audio controls>
                        <source src={`http://localhost:3000/listen/${examDetail.audio}`}
                            type="audio/mpeg" />
                        Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ ph√°t audio.
                    </audio>
                </div>

                {/* ‚úÖ Hi·ªÉn th·ªã th·ªùi gian l√†m b√†i */}
                <div className="timer">
                    <strong>Th·ªùi gian c√≤n l·∫°i:</strong> {formatTime(timeLeft)}
                </div>

                {/* ‚úÖ Danh s√°ch c√¢u h·ªèi */}
                {examDetail.parts.map((part) => (
                    <div key={part.part_id} className="exam-part">
                        <h3>Ph·∫ßn {part.part_number}</h3>
                        {part.questions.map((q, index) => {
                            const questionIndex = examDetail.parts
                                .slice(0, part.part_id - 1)
                                .reduce((acc, p) => acc + p.questions.length, 0) + index;

                            // ‚úÖ N·∫øu `image_filename` t·ªìn t·∫°i, s·ª≠ d·ª•ng n√≥ l√†m URL ·∫£nh; n·∫øu kh√¥ng th√¨ ƒë·ªÉ null
                            const imageUrl = q.image_filename ? `${q.image_filename}` : null;
                            // console.log('h√¨nh ·∫£nh:', imageUrl);
                            return (
                                <div
                                    key={questionIndex}
                                    className="question"
                                    ref={(el) => {
                                        questionRefs.current[questionIndex] = el;
                                    }}
                                >
                                    {imageUrl && (
                                        <div className="question-image">
                                            <img src={imageUrl} alt={`Question ${questionIndex + 1}`} />
                                        </div>
                                    )}
                                    <p>{questionIndex + 1}. {q.question_text}</p>
                                    <ul>
                                        {["A", "B", "C", "D"].map((option) => (
                                            <li key={option} onClick={() => handleSelectAnswer(questionIndex, option)}>
                                                <label className="radio-container">
                                                    <input type="radio" name={`q${questionIndex}`} value={option} checked={answers[questionIndex] === option} />
                                                    <span>{option}. {q[`option${option}` as keyof typeof q]}</span>
                                                </label>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            );
                        })}
                    </div>
                ))}
            </div>
        </div>
    );
};

export default ExamDetail;
